---
import type { Article, QiitaItemResponse, User} from "../../types";
import { users } from "../../users";
import type { ZennPost } from "../../types";
import ArticleComponent from "./articleComponent.astro";
import Image from "astro/components/Image.astro";

const apiToken = import.meta.env.QIITA_TOKEN as string;

export const fetchAllArticles = async (user: User, token: string) : Promise<Article[]> => {
    const response = await fetch(`https://qiita.com/api/v2/users/${user.qiitaId}/items`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  let articles: Article[] = [];
  if (!response.ok) {
    const errorDetails = await response.text();
    console.error(`Error: ${response.status} - ${response.statusText}`);
    console.error(`Details: ${errorDetails}`);
  } else {
    console.log(`${user} api request succeeded`);
    articles = (((await response.json()) as QiitaItemResponse[]).map(res => ({
        user: user, 
        title: res.title,
        published_at: res.created_at,
        updated_at: res.updated_at, 
        classification: "qiita",
        articleUrl: res.url
    })))
    
  }

  try {
    const response = await fetch(`https://zenn.dev/api/articles?username=${user.zennId}&order=latest`);
    if (!response.ok) {
      const errorDetails = await response.text();
      console.error(`Error: ${response.status} - ${response.statusText}`);
      console.error(`Details: ${errorDetails}`);
      return [];
    }

    const data = await response.json();
    if (!data.articles) {
      console.error('Expected articles field in response');
      return [];
    }

    articles = articles.concat((data.articles as ZennPost[]).map((article) => ({
        user: user,
        title: article.title,
        published_at: article.published_at,
        updated_at: article.body_updated_at,
        classification: 'zenn.dev',
        articleUrl: article.path,
    })));
  } catch (error) {
    console.error('An error occurred:', error);
  }

  return articles;
}

const allArticles: Article[] = ((await Promise.all(users.map((user) => fetchAllArticles(user, apiToken)))).flat()).sort((a, b) => {
    return new Date(b.published_at).getTime() - new Date(a.published_at).getTime();
})

---
<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  a {
    text-decoration: none;
  }

  ul {
    margin: 0;
    padding: 0;
  }

  .articles-container {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
    margin: 20px 0;
  }

  .article-right {
    display: flex;
    justify-content: flex-end;
  }

  .article-left {
    display: flex;
    justify-content: flex-start;
  }

  body {
    background-color: rgb(23, 25, 35);
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .container {
    width: 66.67%; 
    margin: 0 auto;
  }

  h1 {
    text-align: center;
    color: white;
    margin: 15px 0;
    border-bottom: 2px solid white;
    font-size: 2rem;
  }

  .users-container {
    display: flex;
    overflow-x: scroll;
    padding: 20px;
    gap: 20px;
    white-space: nowrap; 
    scrollbar-width: none;
  }

  .users-container::-webkit-scrollbar {
    display: none; 
  }

  .user-card {
    width: 150px;
    flex: 0 0 200px; 
    background-color: rgb(33, 36, 48);
    border-radius: 10px;
    padding: 15px;
    text-align: center;
    justify-content: center;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
  }

  .user-card img {
    border-radius: 5%;
    width: 100px;
    height: 100px;
    margin: 0 auto;
    object-fit: cover;
  }

  .user-card h2 {
    font-size: 1.2rem;
    margin: 10px 0;
    color:white;
  }

  .user-card p {
    font-size: 0.9rem;
    color: rgb(150, 150, 150);
    word-wrap: break-word; 
    word-break: break-word;
  }

</style>

<html>
  <head>
    <meta charset="UTF-8">
    <title>Qiita Articles</title>
  </head>
  <body>
    <div class="container">
      <h1>Members</h1>
      <div class="users-container">
        {users.map((user) => (
          <a href={(`/articles/user/${user.userName}`)}>
<div class="user-card w-40 h-60">
            <img src={user.imgSrc} alt={`${user.userName}'s avatar`} />
            <h2>{user.userName}</h2>
            <p>{user.introduction}</p>
          </div>
          </a>
          
          
        ))}
        
      </div>
      <a href="/articles/users" class="text-white text-end text-xl">Detail</a>
      <h1>Articles</h1>

      <div class="articles-container">
        {allArticles.map((article, index) => (
          index % 2 === 0 ? (
            <div class="article-right">
              <ArticleComponent {...article} />
            </div>
          ) : (
            <div class="article-left">
              <ArticleComponent {...article} />
            </div>
          )
        ))}
      </div>
    </div>
  </body>
</html>
